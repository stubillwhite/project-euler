(ns project-euler.problem-0008
  (:require [project-euler.utils :refer [def-]]))

;; The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
;; 
;; 73167176531330624919225119674426574742355349194934
;; 96983520312774506326239578318016984801869478851843
;; 85861560789112949495459501737958331952853208805511
;; 12540698747158523863050715693290963295227443043557
;; 66896648950445244523161731856403098711121722383113
;; 62229893423380308135336276614282806444486645238749
;; 30358907296290491560440772390713810515859307960866
;; 70172427121883998797908792274921901699720888093776
;; 65727333001053367881220235421809751254540594752243
;; 52584907711670556013604839586446706324415722155397
;; 53697817977846174064955149290862569321978468622482
;; 83972241375657056057490261407972968652414535100474
;; 82166370484403199890008895243450658541227588666881
;; 16427171479924442928230863465674813919123162824586
;; 17866458359124566529476545682848912883142607690042
;; 24219022671055626321111109370544217506941658960408
;; 07198403850962455444362981230987879927244284909188
;; 84580156166097919133875499200524063689912560717606
;; 05886116467109405077541002256983155200055935729725
;; 71636269561882670428252483600823257530420752963450
;; 
;; Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this
;; product?

;; Solution
;;
;; My first stab at this was to just use Clojure's standard functions and compute each product by pulling chunks off the
;; number as a string.

(def- number
  (apply str
    "73167176531330624919225119674426574742355349194934"
    "96983520312774506326239578318016984801869478851843"
    "85861560789112949495459501737958331952853208805511"
    "12540698747158523863050715693290963295227443043557"
    "66896648950445244523161731856403098711121722383113"
    "62229893423380308135336276614282806444486645238749"
    "30358907296290491560440772390713810515859307960866"
    "70172427121883998797908792274921901699720888093776"
    "65727333001053367881220235421809751254540594752243"
    "52584907711670556013604839586446706324415722155397"
    "53697817977846174064955149290862569321978468622482"
    "83972241375657056057490261407972968652414535100474"
    "82166370484403199890008895243450658541227588666881"
    "16427171479924442928230863465674813919123162824586"
    "17866458359124566529476545682848912883142607690042"
    "24219022671055626321111109370544217506941658960408"
    "07198403850962455444362981230987879927244284909188"
    "84580156166097919133875499200524063689912560717606"
    "05886116467109405077541002256983155200055935729725"
    "71636269561882670428252483600823257530420752963450"))

(defn- n-adjacent-digits [n s]
  (partition n 1 s))

(defn- product [chunk]
  (reduce *
          (map
           (fn [x] (Long. (str x)))
           (vec chunk))))

(defn max-product-of-n-adjacent-digits [n]
  (reduce
   max
   (map product (n-adjacent-digits n number))))

(defn calculate-answer []
  (max-product-of-n-adjacent-digits 13))

;; My colleague pointed out that it's possible to treat this as a sort of windowed calculation across the string, which
;; reduces the number of multiplications and is quite pleasing. Care needs to be taken to avoid division by zero, but he
;; had another optimisation to jump forwards a full window when a zero is encountered which sidesteps this issue and
;; further improves performance.
