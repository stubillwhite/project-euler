(ns project-euler.problem-0012
  (:require [clojure.math.numeric-tower :as math]
            [project-euler.utils :refer [def-]]))

;; The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 +
;; 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
;; 
;;     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;; 
;; Let us list the factors of the first seven triangle numbers:
;; 
;;  1: 1
;;  3: 1,3
;;  6: 1,2,3,6
;; 10: 1,2,5,10
;; 15: 1,3,5,15
;; 21: 1,3,7,21
;; 28: 1,2,4,7,14,28
;; 
;; We can see that 28 is the first triangle number to have over five divisors.
;; 
;; What is the value of the first triangle number to have over five hundred divisors?

(def- triangular-numbers
  (map first (iterate (fn [[num i]] [(+ num i) (inc i)]) [1 2])))

(defn- factors [n]
  (let [limit   (math/floor (math/sqrt n))
        factor? (fn [x] (zero? (mod n x)))]
    (into #{}
          (apply concat
                 (for [x (range 1 (inc limit)) :when (factor? x)] [x (/ n x)])))))

(defn calculate-answer []
  (let [num (first (filter (fn [x] (> (count (factors x)) 500)) triangular-numbers))]
    (println "Number" num "has" (count (factors num)) "factors")))

